@page "/add-request"
@inject IHttpService _httpService
@inject IClientAuthService _authService
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar

<div style="width: 600px; margin-top: 120px; margin: auto">
    <h3>Create a new Request</h3>
    <EditForm Model="@ApplicationRequest" OnValidSubmit="Apply">
        <MudCard>
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudSelect Label="Select Course" @bind-Value="ApplicationRequest.CourseId">
                    @foreach (var course in Courses)
                    {
                        <MudSelectItem Value="@course.Id">@course.CourseName</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Application Name" @bind-Value="ApplicationRequest.ApplicationName" For="@(() => ApplicationRequest.ApplicationName)" />
                <MudTextField Label="Application Body" @bind-Value="ApplicationRequest.ApplicationBody" For="@(() => ApplicationRequest.ApplicationBody)" Lines="3" />
            </MudCardContent>
            <br />
            <MudCardActions>
                <MudButton FullWidth="true" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="IsLoading">Apply</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {

    private ApplicationRequestFormModel ApplicationRequest { get; set; } = new();
    private List<CourseModel> Courses { get; set; } = new();
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_authService.User != null && _authService.User.UserRole == UserRole.Student)
        {
            try
            {
                Courses = await _httpService.Get<List<CourseModel>>("/api/student/courses");
            }
            catch
            {
                Courses = new List<CourseModel>();
            }
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task Apply()
    {
        try
        {
            await _httpService.Post<object>("/api/student/application", ApplicationRequest);
            _snackbar.Add("Successfully applied!", Severity.Success);
            ApplicationRequest = new();
        }
        catch
        {
            _snackbar.Add("Something went wrong, please try again", Severity.Error);
        }
    }
}
