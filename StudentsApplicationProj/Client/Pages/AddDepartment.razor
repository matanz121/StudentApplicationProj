@page "/add-department"

@inject IHttpService _httpService
@inject IClientAuthService _authService
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar

<div style="width: 600px; margin: auto">
    <h3>Add new Department</h3>
    <EditForm Model="@DepartmentModel" OnValidSubmit="AddNewDepartment">
        <MudCard>
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudSelect Label="Select the Head of department" @bind-Value="DepartmentModel.DepartmentHeadUser.Id">
                    @foreach (var headOfDepartment in HeadOfDepartments)
                    {
                        <MudSelectItem Value="@headOfDepartment.Id">@headOfDepartment.FirstName @headOfDepartment.LastName</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Department Name" @bind-Value="DepartmentModel.DepartmentName" For="@(() => DepartmentModel.DepartmentName)" />
            </MudCardContent>
            <br />
            <MudCardActions>
                <MudButton FullWidth="true" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="IsLoading">Add</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {
    private DepartmentModel DepartmentModel { get; set; } = new DepartmentModel()
    {
        DepartmentHeadUser = new()
    };
    private IList<UserAccountModel> HeadOfDepartments = new List<UserAccountModel>();
    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_authService.User != null && _authService.User.UserRole == UserRole.Administrator)
        {
            try
            {
                HeadOfDepartments = await _httpService.Get<List<UserAccountModel>>($"/api/admin/headsOfDepartments");
            }
            catch
            {
                HeadOfDepartments = new List<UserAccountModel>();
            }
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task AddNewDepartment()
    {
        try
        {
            await _httpService.Post<DepartmentModel>("/api/admin/department", DepartmentModel);
            _snackbar.Add("Successfully Added!", Severity.Success);
            DepartmentModel = new DepartmentModel()
            {
                DepartmentHeadUser = new()
            };
        }
        catch
        {
            _snackbar.Add("Something went wrong, please try again", Severity.Error);
        }
    }
}
