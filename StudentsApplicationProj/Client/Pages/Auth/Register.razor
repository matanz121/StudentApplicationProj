@page "/auth/register"
@layout AuthLayout
@inject IClientAuthService  _clientAuthService
@inject IHttpService _httpService
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div style="max-width: 400px;">
    <h3>Create a new user</h3>
    <EditForm Model="@model" OnValidSubmit="RegisterUser">
        <MudCard>
            <AlertMessage Message="@message" MessageType="@messageType" />
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudTextField Label="First name" HelperText="Max. 25 chart"
                              @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                <MudTextField Label="Last name" HelperText="Max. 25 chart"
                              @bind-Value="model.LastName" For="@(() => model.LastName)" />
                <MudTextField Label="Email" HelperText="Enter a valid email" Class="mt-3"
                              @bind-Value="model.Email" For="@(() => model.Email)" />
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                <MudTextField Label="Confirm Password" HelperText="Repeat your password" Class="mt-3"
                              @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password" />
                <MudSelect Label="Department" @bind-Value="model.DepartmentId">
                    @foreach (var dept in Departments)
                    {
                        <MudSelectItem Value="@dept.Id">@dept.DepartmentName</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Label="Sign up as" @bind-Value="model.UserRole">
                    <MudSelectItem Value="@(UserRole.Student)">Student</MudSelectItem>
                    <MudSelectItem Value="@(UserRole.Instructor)">Instructor</MudSelectItem>
                    <MudSelectItem Value="@(UserRole.DepartmentHead)">Department Head</MudSelectItem>
                </MudSelect>
            </MudCardContent>
            <br />
            <MudCardActions>
                <MudButton FullWidth="true" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="isBusy" Class="ml-auto">Register</MudButton>
            </MudCardActions>
            <MudCardActions>
                <MudButton FullWidth="true" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Disabled="isBusy" OnClick="GoToLogin" Class="ml-auto">Already have an account? Login</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {
    RegisterRequest model = new RegisterRequest() { UserRole = UserRole.Student, DepartmentId = 1 };
    private List<DepartmentModel> Departments { get; set; } = new();
    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Departments = await _httpService.Get<List<DepartmentModel>>($"/api/auth/departments");
        }
        catch
        {
            Departments = new List<DepartmentModel>();
        }
    }


    public async Task RegisterUser()
    {
        isBusy = true;
        try
        {
            await _clientAuthService.Register(model);
            message = "Successfully Registered! It might take some times to approve your account";
            messageType = Models.AlertMessageType.Success;
        }
        catch
        {
            message = "Something went wrong, Please try again";
            messageType = Models.AlertMessageType.Error;
        }
        finally
        {
            isBusy = false;
        }
    }

    void GoToLogin()
    {
        navigationManager.NavigateTo("/auth/login");
    }
}
